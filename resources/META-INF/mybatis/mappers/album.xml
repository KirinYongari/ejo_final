<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper
    PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
    "http://mybatis.org/dtd/mybatis-3-mapper.dtd">

<mapper namespace="kr.co.jhta.dao.AlbumDao">

	<select id="getAlbumCount" resultType="int">
		select
			count(*)
		from
			albums
	</select>

	<select id="getTotalAlbumRows" parameterType="Criteria" resultType="int">
		select
			count(*)
		from
			albums
		<where>
			<if test="opt != null">
				<choose>
					<when test="opt == 'title'">
						album_title like '%' || #{keyword} || '%'
					</when>
					<when test="opt == 'artist'">
						album_artist like '%' || #{keyword} || '%'
					</when>
				</choose>
			</if>
		</where>
	</select>
	
	<select id="getAlbums" parameterType="Criteria" resultType="Album">
		select 
			album_no			as no,
			album_title			as title,
			album_artist		as artist,
			album_cover_img		as coverImg,
			album_year			as year,
			album_likes			as likes,
			album_genre			as genre,
			album_create_date	as createDate
		from (select
				A.*,
				row_number() over (order by album_no desc) rn
			from
				albums A
			<where>
				<if test="opt != null">
					<choose>
						<when test="opt == 'title'">
							album_title like '%' || #{keyword} || '%'
						</when>
						<when test="opt == 'artist'">
							album_artist like '%' || #{keyword} || '%'
						</when>
					</choose>
				</if>
			</where>)
		where
			rn >= #{beginIndex} and rn &lt;= #{endIndex}
	</select>
	
	<!-- 모든 앨범을 가져오기 -->
	<select id="getAllAlbum" resultType="Album">
		select 
			album_no			as no,
			album_title			as title,
			album_artist		as artist,
			album_cover_img		as coverImg,
			album_year			as year,
			album_likes			as likes,
			album_genre			as genre,
			album_create_date	as createDate
		from
			Albums
	</select>
	
	<!-- 메인에 보여줄 최신 앨범 6개 가져오기 -->
	<select id="getSixAlbum" resultType="Album">
		select
			album_no			as no,
			album_title			as title,
			album_artist		as artist,
			album_cover_img		as coverImg,
			album_year			as year,
			album_likes			as likes,
			album_genre			as genre,
			album_create_date	as createDate			
		from 
			Albums
		where 
			rownum &lt;= 6
		order by 
			album_create_date desc
	</select>
	
	<!-- 메인에 보여줄 랜덤용 앨범 5개 가져오기 + 페이징처리용 -->
	<select id="getFiveAlbum" resultType="Album">
		select
			no,
			title,
			artist,
			coverImg,
			year,
			likes,
			genre,
			createDate			
		from 
			(select album_no			as no,
					album_title			as title,
					album_artist		as artist,
					album_cover_img		as coverImg,
					album_year			as year,
					album_likes			as likes,
					album_genre			as genre,
					album_create_date	as createDate
			from albums
			order by dbms_random.value )
		where 
			rownum &lt;= 5
	</select>

	<select id="getAlbumByNo" parameterType="int" resultType="Album">
		select 
			a.album_no			as no,
			a.album_title			as title,
			a.album_artist		as artist,
			a.album_cover_img		as coverImg,
			a.album_year			as year,
			a.album_likes			as likes,
			a.album_genre			as genre,
			a.album_create_date	as createDate,
			b.music_no		as	"music.no"
		from
			albums a, musics b
		where
			a.album_no = #{value}
			and a.album_no = b.album_no
	</select>
	
	<select id="getAlbumByNoForAdmin" parameterType="int" resultType="Album">
		select 
			album_no			as no,
			album_title			as title,
			album_artist		as artist,
			album_cover_img		as coverImg,
			album_year			as year,
			album_likes			as likes,
			album_genre			as genre,
			album_create_date	as createDate
		from
			albums
		where
			album_no = #{value}
	</select>
	
	<update id="updateAlbum" parameterType="Album">
	    update
	    	albums
	    set
	    	album_title	= #{title},
			album_artist = #{artist},
			album_cover_img	=#{coverImg},
			album_year	= #{year},
			album_likes	= #{likes},
			album_genre = #{genre}
		where
			album_no = #{no}		
	</update>
	
	<insert id="addAlbum" parameterType="Album">
		insert into
			albums
		(album_no, album_title, album_artist, album_cover_img, album_year, album_likes, album_genre, album_create_date)
		values
		(album_seq.nextval, #{title}, #{artist}, #{coverImg}, #{year}, 0, #{genre}, sysdate)
	</insert>
	
</mapper>   
